"""Set up the namespace for interactive sessions."""

from __future__ import annotations

import inspect
import os
import string
import subprocess
import sys
import time
import warnings
from datetime import date, datetime
from pathlib import Path
from pprint import pformat, pprint
from typing import *  # type: ignore

__author__ = "Vincent Lin"


# ==================== Rich Printing Setup ==================== #


def setup_rich() -> tuple[Callable, Callable]:
    """Set up rich logging to replace the builtin print."""
    import rich
    from rich.console import Console
    from rich.traceback import install
    console = Console(stderr=True)
    install(console=console)
    return rich.print, console.log


# In any case, save the builtin print so it can still be used
_print = print

try:
    print, log = setup_rich()
except ModuleNotFoundError:
    warnings.warn("The rich library is not installed.")
    confirmation = input("Would you like to install rich right now? (y/N) ")
    if confirmation.lower() == "y":
        subprocess.check_call([sys.executable, "-m", "pip", "install", "rich"])
        print, log = setup_rich()
    del confirmation


del setup_rich

# ==================== Convenience Functions ==================== #


def signature(callable: Callable) -> inspect.Signature:
    """Shortcut to inspect.signature."""
    return inspect.signature(callable)


def get_signature(callable: Callable) -> str:
    """Get the method signature as a string."""
    try:
        # e.g. '(length, byteorder, *, signed=False)'
        params = str(signature(callable))
        return f"[bold magenta]{callable.__name__}[/]: {params}"
    # Uninspectable for some reason
    except ValueError:
        return f"[bold magenta]{callable.__name__}[/]: ???"


def info(o: object, /) -> None:
    """Print basic information about an object."""
    # Neat trick to get (columns, lines) of current terminal
    width, _ = os.get_terminal_size()

    # Separate the dir() into sets of formatted strings
    dunders, methods, variables = set(), set(), set()
    for attr in dir(o):
        # Dunders
        if attr.startswith("__") and attr.endswith("__"):
            dunders.add(f"[yellow]{attr}[/]")
        else:
            val = getattr(o, attr)
            # Methods
            if isinstance(val, Callable):
                methods.add(get_signature(val))
            # Variables
            else:
                variables.add(
                    f"[bold blue]{attr}[/]: [green]{type(val).__name__}[/]")

    # Format the lines to print
    BORDER = "=" * width
    DIVIDER = "-" * width
    lines = [
        BORDER,
        f"[bold bright_black]The [red]type @ ID[/] of this object:[/]",
        f"[bold]{type(o)} ({type(o).__name__}) @ {hex(id(o))}[/]",
        DIVIDER,
        f"[bold bright_black]The [red]dunders[/] within this object:[/]",
        ", ".join(dunders) or None,
        DIVIDER,
        f"[bold bright_black]The [red]variables[/] within this object:[/]",
        "\n".join(variables) or None,
        DIVIDER,
        f"[bold bright_black]The [red]methods[/] within this object:[/]",
        "\n".join(methods) or None,
        DIVIDER,
        f"[bold bright_black]The [red]printed representation[/] of this object:[/]",
        o,
        BORDER,
    ]

    # Apply rich print on every line
    for line in lines:
        print(line)


def run(command: str, /) -> None:
    """Run a PowerShell command in a one-time subprocess."""
    # Using - as the PS -Command arg allows you to read from stdin
    # This should help avoid any quote mark sanitization stuff
    args = f"powershell.exe -noprofile -Command -"
    process = subprocess.Popen(args=args,
                               stdin=subprocess.PIPE,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)
    stdout, _ = process.communicate(bytes(command, encoding="utf-8"))
    # Print the output as it was outputted, so don't use rich
    sys.stdout.write(stdout.decode("utf-8"))


shell = run


def pwd() -> None:
    """Run the Get-Location cmdlet."""
    run("pwd")


def clear() -> None:
    """Run the Clear-Host cmdlet."""
    run("clear")


cls = clear


def showfile(path: str | Path, *,
             mode: str = "rt",
             encoding: str = "utf-8"
             ) -> None:
    """Show the contents of a file."""
    with Path(path).open(mode, encoding=encoding) as fp:
        print(fp.read())


cat = showfile


def dumpfile(path: str | Path,
             content: str | bytes, *,
             encoding: str = "utf-8"
             ) -> None:
    """Write contents to a file."""
    if isinstance(content, str):
        mode = "wt"
        # Neat trick to get number of bytes of actual string content
        num_bytes = len(content.encode(encoding))
    else:
        mode = "wb"
        num_bytes = len(content)

    path = Path(path).resolve()
    with path.open(mode, encoding=encoding) as fp:
        fp.write(content)

    log(f"Dumped {num_bytes} bytes with {encoding=} to file '{path}'.")


# =================== Convenience Dummy Instances =================== #


home = Path.home()

nums = [i for i in range(10)]

letters = {num: char for num, char in enumerate(string.ascii_lowercase)}

lorem = (
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod "
    "tempor incididunt ut labore et dolore magna aliqua. Quis blandit turpis "
    "cursus in hac habitasse. Odio facilisis mauris sit amet massa vitae. Est"
    "lorem ipsum dolor sit amet consectetur. Pharetra convallis posuere morbi"
    "leo urna molestie at elementum. Posuere urna nec tincidunt praesent semp"
    "er feugiat nibh sed pulvinar. Vulputate dignissim suspendisse in est ant"
    "e in nibh mauris. Mauris sit amet massa vitae. Nunc congue nisi vitae su"
    "scipit tellus mauris a diam maecenas. Id consectetur purus ut faucibus p"
    "ulvinar elementum integer. Dolor sit amet consectetur adipiscing elit ut"
    "aliquam purus sit. Dolor magna eget est lorem ipsum dolor sit. Posuere s"
    "ollicitudin aliquam ultrices sagittis. Vitae tempus quam pellentesque ne"
    "c nam aliquam sem. Eget nulla facilisi etiam dignissim diam quis. Massa "
    "enim nec dui nunc mattis enim. Sit amet massa vitae tortor condimentum l"
    "acinia. Aliquam ultrices sagittis orci a scelerisque purus semper."
)
